
blinky.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000076c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000003  00800100  00800100  000007e0  2**0
                  ALLOC
  2 .stab         000006cc  00000000  00000000  000007e0  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000054  00000000  00000000  00000eac  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000000b8  00000000  00000000  00000f00  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000000bf  00000000  00000000  00000fb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b54  00000000  00000000  00001077  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000003b6  00000000  00000000  00001bcb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009b3  00000000  00000000  00001f81  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000012c  00000000  00000000  00002934  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000039f  00000000  00000000  00002a60  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000b3f  00000000  00000000  00002dff  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b8  00000000  00000000  0000393e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 000000a9  00000000  00000000  000039f6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	f2 c0       	rjmp	.+484    	; 0x1e6 <__ctors_end>
   2:	00 00       	nop
   4:	0b c1       	rjmp	.+534    	; 0x21c <__bad_interrupt>
   6:	00 00       	nop
   8:	09 c1       	rjmp	.+530    	; 0x21c <__bad_interrupt>
   a:	00 00       	nop
   c:	07 c1       	rjmp	.+526    	; 0x21c <__bad_interrupt>
   e:	00 00       	nop
  10:	05 c1       	rjmp	.+522    	; 0x21c <__bad_interrupt>
  12:	00 00       	nop
  14:	03 c1       	rjmp	.+518    	; 0x21c <__bad_interrupt>
  16:	00 00       	nop
  18:	01 c1       	rjmp	.+514    	; 0x21c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	ff c0       	rjmp	.+510    	; 0x21c <__bad_interrupt>
  1e:	00 00       	nop
  20:	fd c0       	rjmp	.+506    	; 0x21c <__bad_interrupt>
  22:	00 00       	nop
  24:	fb c0       	rjmp	.+502    	; 0x21c <__bad_interrupt>
  26:	00 00       	nop
  28:	f5 c1       	rjmp	.+1002   	; 0x414 <__vector_10>
  2a:	00 00       	nop
  2c:	32 c2       	rjmp	.+1124   	; 0x492 <__vector_11>
  2e:	00 00       	nop
  30:	f5 c0       	rjmp	.+490    	; 0x21c <__bad_interrupt>
  32:	00 00       	nop
  34:	f3 c0       	rjmp	.+486    	; 0x21c <__bad_interrupt>
  36:	00 00       	nop
  38:	f1 c0       	rjmp	.+482    	; 0x21c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	ef c0       	rjmp	.+478    	; 0x21c <__bad_interrupt>
  3e:	00 00       	nop
  40:	ed c0       	rjmp	.+474    	; 0x21c <__bad_interrupt>
  42:	00 00       	nop
  44:	eb c0       	rjmp	.+470    	; 0x21c <__bad_interrupt>
  46:	00 00       	nop
  48:	e9 c0       	rjmp	.+466    	; 0x21c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	e7 c0       	rjmp	.+462    	; 0x21c <__bad_interrupt>
  4e:	00 00       	nop
  50:	e5 c0       	rjmp	.+458    	; 0x21c <__bad_interrupt>
  52:	00 00       	nop
  54:	e3 c0       	rjmp	.+454    	; 0x21c <__bad_interrupt>
  56:	00 00       	nop
  58:	e1 c0       	rjmp	.+450    	; 0x21c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	df c0       	rjmp	.+446    	; 0x21c <__bad_interrupt>
  5e:	00 00       	nop
  60:	dd c0       	rjmp	.+442    	; 0x21c <__bad_interrupt>
  62:	00 00       	nop
  64:	db c0       	rjmp	.+438    	; 0x21c <__bad_interrupt>
  66:	00 00       	nop
  68:	d9 c0       	rjmp	.+434    	; 0x21c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	d7 c0       	rjmp	.+430    	; 0x21c <__bad_interrupt>
  6e:	00 00       	nop
  70:	d5 c0       	rjmp	.+426    	; 0x21c <__bad_interrupt>
  72:	00 00       	nop
  74:	d3 c0       	rjmp	.+422    	; 0x21c <__bad_interrupt>
  76:	00 00       	nop
  78:	d1 c0       	rjmp	.+418    	; 0x21c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	cf c0       	rjmp	.+414    	; 0x21c <__bad_interrupt>
  7e:	00 00       	nop
  80:	cd c0       	rjmp	.+410    	; 0x21c <__bad_interrupt>
  82:	00 00       	nop
  84:	cb c0       	rjmp	.+406    	; 0x21c <__bad_interrupt>
  86:	00 00       	nop
  88:	c9 c0       	rjmp	.+402    	; 0x21c <__bad_interrupt>
  8a:	00 00       	nop
  8c:	c7 c0       	rjmp	.+398    	; 0x21c <__bad_interrupt>
  8e:	00 00       	nop
  90:	c5 c0       	rjmp	.+394    	; 0x21c <__bad_interrupt>
  92:	00 00       	nop
  94:	c3 c0       	rjmp	.+390    	; 0x21c <__bad_interrupt>
  96:	00 00       	nop
  98:	c1 c0       	rjmp	.+386    	; 0x21c <__bad_interrupt>
  9a:	00 00       	nop
  9c:	bf c0       	rjmp	.+382    	; 0x21c <__bad_interrupt>
  9e:	00 00       	nop
  a0:	bd c0       	rjmp	.+378    	; 0x21c <__bad_interrupt>
  a2:	00 00       	nop
  a4:	bb c0       	rjmp	.+374    	; 0x21c <__bad_interrupt>
  a6:	00 00       	nop
  a8:	b9 c0       	rjmp	.+370    	; 0x21c <__bad_interrupt>
  aa:	00 00       	nop

000000ac <morse_code_table>:
  ac:	42 84 a4 83 01 24 c3 04 02 74 a3 44 c2 82 e3 64     B....$...t.D...d
  bc:	d4 43 03 81 23 14 63 94 b4 c4                       .C..#.c...

000000c6 <__c.1577>:
  c6:	53 4f 53 00                                         SOS.

000000ca <__c.1582>:
  ca:	44 4f 45 53 20 41 4e 59 42 4f 44 59 20 53 54 49     DOES ANYBODY STI
  da:	4c 4c 20 4b 4e 4f 57 20 4d 4f 52 53 45 20 43 4f     LL KNOW MORSE CO
  ea:	44 45 3f 00                                         DE?.

000000ee <__c.1590>:
  ee:	53 70 61 63 65 0a 00                                Space..

000000f5 <__c.1592>:
  f5:	4f 70 70 73 2c 20 75 6e 73 75 70 70 6f 72 74 65     Opps, unsupporte
 105:	64 20 63 68 61 72 61 63 74 65 72 3a 20 00           d character: .

00000113 <__c.1594>:
 113:	0a 00                                               ..

00000115 <__c.1596>:
 115:	43 68 61 72 20 00                                   Char .

0000011b <__c.1601>:
 11b:	20 64 61 68 00                                       dah.

00000120 <__c.1603>:
 120:	20 64 69 74 00                                       dit.

00000125 <__c.1608>:
 125:	0a 00                                               ..

00000127 <__c.1619>:
 127:	0a 00                                               ..

00000129 <descriptor_list>:
 129:	00 01 00 00 60 01 12 00 02 00 00 72 01 22 00 22     ....`......r."."
 139:	00 00 94 01 15 00 21 00 00 84 01 09 00 03 00 00     ......!.........
 149:	a9 01 04 01 03 09 04 ad 01 14 02 03 09 04 c3 01     ................
 159:	20                                                   

0000015a <endpoint_config_table>:
 15a:	00 00 01 c1 26 00                                   ....&.

00000160 <device_descriptor>:
 160:	12 01 00 02 00 00 00 20 c0 16 79 04 00 01 01 02     ....... ..y.....
 170:	00 01                                               ..

00000172 <config1_descriptor>:
 172:	09 02 22 00 01 01 00 c0 32 09 04 00 00 01 03 00     ..".....2.......
 182:	00 00 09 21 11 01 00 01 22 15 00 07 05 83 03 20     ...!...."...... 
 192:	00 01                                               ..

00000194 <hid_report_descriptor>:
 194:	06 31 ff 09 74 a1 53 75 08 15 00 26 ff 00 95 20     .1..t.Su...&... 
 1a4:	09 75 81 02 c0                                      .u...

000001a9 <string0>:
 1a9:	04 03 09 04                                         ....

000001ad <string1>:
 1ad:	14 03 59 00 6f 00 75 00 72 00 20 00 4e 00 61 00     ..Y.o.u.r. .N.a.
 1bd:	6d 00 65 00 00 00                                   m.e...

000001c3 <string2>:
 1c3:	20 03 59 00 6f 00 75 00 72 00 20 00 55 00 53 00      .Y.o.u.r. .U.S.
 1d3:	42 00 20 00 44 00 65 00 76 00 69 00 63 00 65 00     B. .D.e.v.i.c.e.
 1e3:	00 00 00                                            ...

000001e6 <__ctors_end>:
 1e6:	11 24       	eor	r1, r1
 1e8:	1f be       	out	0x3f, r1	; 63
 1ea:	cf ef       	ldi	r28, 0xFF	; 255
 1ec:	da e0       	ldi	r29, 0x0A	; 10
 1ee:	de bf       	out	0x3e, r29	; 62
 1f0:	cd bf       	out	0x3d, r28	; 61

000001f2 <__do_copy_data>:
 1f2:	11 e0       	ldi	r17, 0x01	; 1
 1f4:	a0 e0       	ldi	r26, 0x00	; 0
 1f6:	b1 e0       	ldi	r27, 0x01	; 1
 1f8:	ec e6       	ldi	r30, 0x6C	; 108
 1fa:	f7 e0       	ldi	r31, 0x07	; 7
 1fc:	02 c0       	rjmp	.+4      	; 0x202 <__do_copy_data+0x10>
 1fe:	05 90       	lpm	r0, Z+
 200:	0d 92       	st	X+, r0
 202:	a0 30       	cpi	r26, 0x00	; 0
 204:	b1 07       	cpc	r27, r17
 206:	d9 f7       	brne	.-10     	; 0x1fe <__do_copy_data+0xc>

00000208 <__do_clear_bss>:
 208:	11 e0       	ldi	r17, 0x01	; 1
 20a:	a0 e0       	ldi	r26, 0x00	; 0
 20c:	b1 e0       	ldi	r27, 0x01	; 1
 20e:	01 c0       	rjmp	.+2      	; 0x212 <.do_clear_bss_start>

00000210 <.do_clear_bss_loop>:
 210:	1d 92       	st	X+, r1

00000212 <.do_clear_bss_start>:
 212:	a3 30       	cpi	r26, 0x03	; 3
 214:	b1 07       	cpc	r27, r17
 216:	e1 f7       	brne	.-8      	; 0x210 <.do_clear_bss_loop>
 218:	74 d0       	rcall	.+232    	; 0x302 <main>
 21a:	a6 c2       	rjmp	.+1356   	; 0x768 <_exit>

0000021c <__bad_interrupt>:
 21c:	f1 ce       	rjmp	.-542    	; 0x0 <__vectors>

0000021e <morse_character>:
 21e:	cf 93       	push	r28
 220:	df 93       	push	r29
 222:	c8 2f       	mov	r28, r24
 224:	80 32       	cpi	r24, 0x20	; 32
 226:	59 f4       	brne	.+22     	; 0x23e <morse_character+0x20>
 228:	8e ee       	ldi	r24, 0xEE	; 238
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	89 d2       	rcall	.+1298   	; 0x740 <print_P>
 22e:	8f ef       	ldi	r24, 0xFF	; 255
 230:	97 e5       	ldi	r25, 0x57	; 87
 232:	ab e1       	ldi	r26, 0x1B	; 27
 234:	81 50       	subi	r24, 0x01	; 1
 236:	90 40       	sbci	r25, 0x00	; 0
 238:	a0 40       	sbci	r26, 0x00	; 0
 23a:	e1 f7       	brne	.-8      	; 0x234 <morse_character+0x16>
 23c:	4d c0       	rjmp	.+154    	; 0x2d8 <morse_character+0xba>
 23e:	81 54       	subi	r24, 0x41	; 65
 240:	8a 31       	cpi	r24, 0x1A	; 26
 242:	48 f0       	brcs	.+18     	; 0x256 <morse_character+0x38>
 244:	85 ef       	ldi	r24, 0xF5	; 245
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	7b d2       	rcall	.+1270   	; 0x740 <print_P>
 24a:	8c 2f       	mov	r24, r28
 24c:	9d d0       	rcall	.+314    	; 0x388 <usb_debug_putchar>
 24e:	83 e1       	ldi	r24, 0x13	; 19
 250:	91 e0       	ldi	r25, 0x01	; 1
 252:	76 d2       	rcall	.+1260   	; 0x740 <print_P>
 254:	43 c0       	rjmp	.+134    	; 0x2dc <morse_character+0xbe>
 256:	85 e1       	ldi	r24, 0x15	; 21
 258:	91 e0       	ldi	r25, 0x01	; 1
 25a:	72 d2       	rcall	.+1252   	; 0x740 <print_P>
 25c:	8c 2f       	mov	r24, r28
 25e:	94 d0       	rcall	.+296    	; 0x388 <usb_debug_putchar>
 260:	8a e3       	ldi	r24, 0x3A	; 58
 262:	92 d0       	rcall	.+292    	; 0x388 <usb_debug_putchar>
 264:	ec 2f       	mov	r30, r28
 266:	f0 e0       	ldi	r31, 0x00	; 0
 268:	e5 59       	subi	r30, 0x95	; 149
 26a:	ff 4f       	sbci	r31, 0xFF	; 255
 26c:	c4 91       	lpm	r28, Z+
 26e:	dc 2f       	mov	r29, r28
 270:	d7 70       	andi	r29, 0x07	; 7
 272:	26 c0       	rjmp	.+76     	; 0x2c0 <morse_character+0xa2>
 274:	5e 9a       	sbi	0x0b, 6	; 11
 276:	c7 ff       	sbrs	r28, 7
 278:	0b c0       	rjmp	.+22     	; 0x290 <morse_character+0x72>
 27a:	8b e1       	ldi	r24, 0x1B	; 27
 27c:	91 e0       	ldi	r25, 0x01	; 1
 27e:	60 d2       	rcall	.+1216   	; 0x740 <print_P>
 280:	8f ef       	ldi	r24, 0xFF	; 255
 282:	97 eb       	ldi	r25, 0xB7	; 183
 284:	ab e0       	ldi	r26, 0x0B	; 11
 286:	81 50       	subi	r24, 0x01	; 1
 288:	90 40       	sbci	r25, 0x00	; 0
 28a:	a0 40       	sbci	r26, 0x00	; 0
 28c:	e1 f7       	brne	.-8      	; 0x286 <morse_character+0x68>
 28e:	0a c0       	rjmp	.+20     	; 0x2a4 <morse_character+0x86>
 290:	80 e2       	ldi	r24, 0x20	; 32
 292:	91 e0       	ldi	r25, 0x01	; 1
 294:	55 d2       	rcall	.+1194   	; 0x740 <print_P>
 296:	8f ef       	ldi	r24, 0xFF	; 255
 298:	97 ee       	ldi	r25, 0xE7	; 231
 29a:	a3 e0       	ldi	r26, 0x03	; 3
 29c:	81 50       	subi	r24, 0x01	; 1
 29e:	90 40       	sbci	r25, 0x00	; 0
 2a0:	a0 40       	sbci	r26, 0x00	; 0
 2a2:	e1 f7       	brne	.-8      	; 0x29c <morse_character+0x7e>
 2a4:	00 c0       	rjmp	.+0      	; 0x2a6 <morse_character+0x88>
 2a6:	00 00       	nop
 2a8:	5e 98       	cbi	0x0b, 6	; 11
 2aa:	8f ef       	ldi	r24, 0xFF	; 255
 2ac:	97 ee       	ldi	r25, 0xE7	; 231
 2ae:	a3 e0       	ldi	r26, 0x03	; 3
 2b0:	81 50       	subi	r24, 0x01	; 1
 2b2:	90 40       	sbci	r25, 0x00	; 0
 2b4:	a0 40       	sbci	r26, 0x00	; 0
 2b6:	e1 f7       	brne	.-8      	; 0x2b0 <morse_character+0x92>
 2b8:	00 c0       	rjmp	.+0      	; 0x2ba <morse_character+0x9c>
 2ba:	00 00       	nop
 2bc:	cc 0f       	add	r28, r28
 2be:	d1 50       	subi	r29, 0x01	; 1
 2c0:	dd 23       	and	r29, r29
 2c2:	c1 f6       	brne	.-80     	; 0x274 <morse_character+0x56>
 2c4:	85 e2       	ldi	r24, 0x25	; 37
 2c6:	91 e0       	ldi	r25, 0x01	; 1
 2c8:	3b d2       	rcall	.+1142   	; 0x740 <print_P>
 2ca:	8f ef       	ldi	r24, 0xFF	; 255
 2cc:	9f ec       	ldi	r25, 0xCF	; 207
 2ce:	a7 e0       	ldi	r26, 0x07	; 7
 2d0:	81 50       	subi	r24, 0x01	; 1
 2d2:	90 40       	sbci	r25, 0x00	; 0
 2d4:	a0 40       	sbci	r26, 0x00	; 0
 2d6:	e1 f7       	brne	.-8      	; 0x2d0 <morse_character+0xb2>
 2d8:	00 c0       	rjmp	.+0      	; 0x2da <morse_character+0xbc>
 2da:	00 00       	nop
 2dc:	df 91       	pop	r29
 2de:	cf 91       	pop	r28
 2e0:	08 95       	ret

000002e2 <morse_P>:
 2e2:	cf 93       	push	r28
 2e4:	df 93       	push	r29
 2e6:	ec 01       	movw	r28, r24
 2e8:	fe 01       	movw	r30, r28
 2ea:	21 96       	adiw	r28, 0x01	; 1
 2ec:	84 91       	lpm	r24, Z+
 2ee:	88 23       	and	r24, r24
 2f0:	11 f0       	breq	.+4      	; 0x2f6 <morse_P+0x14>
 2f2:	95 df       	rcall	.-214    	; 0x21e <morse_character>
 2f4:	f9 cf       	rjmp	.-14     	; 0x2e8 <morse_P+0x6>
 2f6:	87 e2       	ldi	r24, 0x27	; 39
 2f8:	91 e0       	ldi	r25, 0x01	; 1
 2fa:	22 d2       	rcall	.+1092   	; 0x740 <print_P>
 2fc:	df 91       	pop	r29
 2fe:	cf 91       	pop	r28
 300:	08 95       	ret

00000302 <main>:
 302:	80 e8       	ldi	r24, 0x80	; 128
 304:	80 93 61 00 	sts	0x0061, r24
 308:	10 92 61 00 	sts	0x0061, r1
 30c:	56 9a       	sbi	0x0a, 6	; 10
 30e:	5e 98       	cbi	0x0b, 6	; 11
 310:	24 d0       	rcall	.+72     	; 0x35a <usb_init>
 312:	c0 e0       	ldi	r28, 0x00	; 0
 314:	0d c0       	rjmp	.+26     	; 0x330 <main+0x2e>
 316:	86 ec       	ldi	r24, 0xC6	; 198
 318:	90 e0       	ldi	r25, 0x00	; 0
 31a:	e3 df       	rcall	.-58     	; 0x2e2 <morse_P>
 31c:	8f ef       	ldi	r24, 0xFF	; 255
 31e:	9d e3       	ldi	r25, 0x3D	; 61
 320:	a9 e4       	ldi	r26, 0x49	; 73
 322:	81 50       	subi	r24, 0x01	; 1
 324:	90 40       	sbci	r25, 0x00	; 0
 326:	a0 40       	sbci	r26, 0x00	; 0
 328:	e1 f7       	brne	.-8      	; 0x322 <main+0x20>
 32a:	00 c0       	rjmp	.+0      	; 0x32c <main+0x2a>
 32c:	00 00       	nop
 32e:	cf 5f       	subi	r28, 0xFF	; 255
 330:	c6 30       	cpi	r28, 0x06	; 6
 332:	88 f3       	brcs	.-30     	; 0x316 <main+0x14>
 334:	8a ec       	ldi	r24, 0xCA	; 202
 336:	90 e0       	ldi	r25, 0x00	; 0
 338:	d4 df       	rcall	.-88     	; 0x2e2 <morse_P>
 33a:	8f ef       	ldi	r24, 0xFF	; 255
 33c:	9f e4       	ldi	r25, 0x4F	; 79
 33e:	a3 ec       	ldi	r26, 0xC3	; 195
 340:	81 50       	subi	r24, 0x01	; 1
 342:	90 40       	sbci	r25, 0x00	; 0
 344:	a0 40       	sbci	r26, 0x00	; 0
 346:	e1 f7       	brne	.-8      	; 0x340 <main+0x3e>
 348:	00 c0       	rjmp	.+0      	; 0x34a <main+0x48>
 34a:	00 00       	nop
 34c:	c0 e0       	ldi	r28, 0x00	; 0
 34e:	e3 cf       	rjmp	.-58     	; 0x316 <main+0x14>

00000350 <usb_wait_in_ready>:


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 350:	80 91 e8 00 	lds	r24, 0x00E8
 354:	80 ff       	sbrs	r24, 0
 356:	fc cf       	rjmp	.-8      	; 0x350 <usb_wait_in_ready>
}
 358:	08 95       	ret

0000035a <usb_init>:


// initialize USB
void usb_init(void)
{
	HW_CONFIG();
 35a:	81 e0       	ldi	r24, 0x01	; 1
 35c:	80 93 d7 00 	sts	0x00D7, r24
	USB_FREEZE();				// enable USB
 360:	80 ea       	ldi	r24, 0xA0	; 160
 362:	80 93 d8 00 	sts	0x00D8, r24
	PLL_CONFIG();				// config PLL
 366:	82 e1       	ldi	r24, 0x12	; 18
 368:	89 bd       	out	0x29, r24	; 41
        while (!(PLLCSR & (1<<PLOCK))) ;	// wait for PLL lock
 36a:	09 b4       	in	r0, 0x29	; 41
 36c:	00 fe       	sbrs	r0, 0
 36e:	fd cf       	rjmp	.-6      	; 0x36a <usb_init+0x10>
        USB_CONFIG();				// start USB clock
 370:	80 e9       	ldi	r24, 0x90	; 144
 372:	80 93 d8 00 	sts	0x00D8, r24
        UDCON = 0;				// enable attach resistor
 376:	10 92 e0 00 	sts	0x00E0, r1
	usb_configuration = 0;
 37a:	10 92 00 01 	sts	0x0100, r1
        UDIEN = (1<<EORSTE)|(1<<SOFE);
 37e:	8c e0       	ldi	r24, 0x0C	; 12
 380:	80 93 e2 00 	sts	0x00E2, r24
	sei();
 384:	78 94       	sei
}
 386:	08 95       	ret

00000388 <usb_debug_putchar>:
{
	static uint8_t previous_timeout=0;
	uint8_t timeout, intr_state;

	// if we're not online (enumerated and configured), error
	if (!usb_configuration) return -1;
 388:	90 91 00 01 	lds	r25, 0x0100
 38c:	99 23       	and	r25, r25
 38e:	09 f4       	brne	.+2      	; 0x392 <usb_debug_putchar+0xa>
 390:	3d c0       	rjmp	.+122    	; 0x40c <usb_debug_putchar+0x84>
	// interrupts are disabled so these functions can be
	// used from the main program or interrupt context,
	// even both in the same program!
	intr_state = SREG;
 392:	9f b7       	in	r25, 0x3f	; 63
	cli();
 394:	f8 94       	cli
	UENUM = DEBUG_TX_ENDPOINT;
 396:	23 e0       	ldi	r18, 0x03	; 3
 398:	20 93 e9 00 	sts	0x00E9, r18
	// if we gave up due to timeout before, don't wait again
	if (previous_timeout) {
 39c:	20 91 02 01 	lds	r18, 0x0102
 3a0:	22 23       	and	r18, r18
 3a2:	41 f0       	breq	.+16     	; 0x3b4 <usb_debug_putchar+0x2c>
		if (!(UEINTX & (1<<RWAL))) {
 3a4:	20 91 e8 00 	lds	r18, 0x00E8
 3a8:	25 fd       	sbrc	r18, 5
 3aa:	02 c0       	rjmp	.+4      	; 0x3b0 <usb_debug_putchar+0x28>
			SREG = intr_state;
 3ac:	9f bf       	out	0x3f, r25	; 63
 3ae:	2e c0       	rjmp	.+92     	; 0x40c <usb_debug_putchar+0x84>
			return -1;
		}
		previous_timeout = 0;
 3b0:	10 92 02 01 	sts	0x0102, r1
	}
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + 4;
 3b4:	20 91 e4 00 	lds	r18, 0x00E4
 3b8:	2c 5f       	subi	r18, 0xFC	; 252
		// has the USB gone offline?
		if (!usb_configuration) return -1;
		// get ready to try checking again
		intr_state = SREG;
		cli();
		UENUM = DEBUG_TX_ENDPOINT;
 3ba:	33 e0       	ldi	r19, 0x03	; 3
	}
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + 4;
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
 3bc:	40 91 e8 00 	lds	r20, 0x00E8
 3c0:	45 fd       	sbrc	r20, 5
 3c2:	12 c0       	rjmp	.+36     	; 0x3e8 <usb_debug_putchar+0x60>
		SREG = intr_state;
 3c4:	9f bf       	out	0x3f, r25	; 63
		// have we waited too long?
		if (UDFNUML == timeout) {
 3c6:	90 91 e4 00 	lds	r25, 0x00E4
 3ca:	92 17       	cp	r25, r18
 3cc:	21 f4       	brne	.+8      	; 0x3d6 <usb_debug_putchar+0x4e>
			previous_timeout = 1;
 3ce:	81 e0       	ldi	r24, 0x01	; 1
 3d0:	80 93 02 01 	sts	0x0102, r24
 3d4:	1b c0       	rjmp	.+54     	; 0x40c <usb_debug_putchar+0x84>
			return -1;
		}
		// has the USB gone offline?
		if (!usb_configuration) return -1;
 3d6:	90 91 00 01 	lds	r25, 0x0100
 3da:	99 23       	and	r25, r25
 3dc:	c9 f0       	breq	.+50     	; 0x410 <usb_debug_putchar+0x88>
		// get ready to try checking again
		intr_state = SREG;
 3de:	9f b7       	in	r25, 0x3f	; 63
		cli();
 3e0:	f8 94       	cli
		UENUM = DEBUG_TX_ENDPOINT;
 3e2:	30 93 e9 00 	sts	0x00E9, r19
	}
 3e6:	ea cf       	rjmp	.-44     	; 0x3bc <usb_debug_putchar+0x34>
	// actually write the byte into the FIFO
	UEDATX = c;
 3e8:	80 93 f1 00 	sts	0x00F1, r24
	// if this completed a packet, transmit it now!
	if (!(UEINTX & (1<<RWAL))) {
 3ec:	80 91 e8 00 	lds	r24, 0x00E8
 3f0:	85 fd       	sbrc	r24, 5
 3f2:	06 c0       	rjmp	.+12     	; 0x400 <usb_debug_putchar+0x78>
		UEINTX = 0x3A;
 3f4:	8a e3       	ldi	r24, 0x3A	; 58
 3f6:	80 93 e8 00 	sts	0x00E8, r24
		debug_flush_timer = 0;
 3fa:	10 92 01 01 	sts	0x0101, r1
 3fe:	03 c0       	rjmp	.+6      	; 0x406 <usb_debug_putchar+0x7e>
	} else {
		debug_flush_timer = 2;
 400:	82 e0       	ldi	r24, 0x02	; 2
 402:	80 93 01 01 	sts	0x0101, r24
	}
	SREG = intr_state;
 406:	9f bf       	out	0x3f, r25	; 63
	return 0;
 408:	80 e0       	ldi	r24, 0x00	; 0
 40a:	08 95       	ret
{
	static uint8_t previous_timeout=0;
	uint8_t timeout, intr_state;

	// if we're not online (enumerated and configured), error
	if (!usb_configuration) return -1;
 40c:	8f ef       	ldi	r24, 0xFF	; 255
 40e:	08 95       	ret
		if (UDFNUML == timeout) {
			previous_timeout = 1;
			return -1;
		}
		// has the USB gone offline?
		if (!usb_configuration) return -1;
 410:	8f ef       	ldi	r24, 0xFF	; 255
	} else {
		debug_flush_timer = 2;
	}
	SREG = intr_state;
	return 0;
}
 412:	08 95       	ret

00000414 <__vector_10>:

// USB Device Interrupt - handle all device-level events
// the transmit buffer flushing is triggered by the start of frame
//
ISR(USB_GEN_vect)
{
 414:	1f 92       	push	r1
 416:	0f 92       	push	r0
 418:	0f b6       	in	r0, 0x3f	; 63
 41a:	0f 92       	push	r0
 41c:	11 24       	eor	r1, r1
 41e:	8f 93       	push	r24
 420:	9f 93       	push	r25
	uint8_t intbits, t;

        intbits = UDINT;
 422:	80 91 e1 00 	lds	r24, 0x00E1
        UDINT = 0;
 426:	10 92 e1 00 	sts	0x00E1, r1
        if (intbits & (1<<EORSTI)) {
 42a:	83 ff       	sbrs	r24, 3
 42c:	0f c0       	rjmp	.+30     	; 0x44c <__vector_10+0x38>
		UENUM = 0;
 42e:	10 92 e9 00 	sts	0x00E9, r1
		UECONX = 1;
 432:	91 e0       	ldi	r25, 0x01	; 1
 434:	90 93 eb 00 	sts	0x00EB, r25
		UECFG0X = EP_TYPE_CONTROL;
 438:	10 92 ec 00 	sts	0x00EC, r1
		UECFG1X = EP_SIZE(ENDPOINT0_SIZE) | EP_SINGLE_BUFFER;
 43c:	92 e2       	ldi	r25, 0x22	; 34
 43e:	90 93 ed 00 	sts	0x00ED, r25
		UEIENX = (1<<RXSTPE);
 442:	98 e0       	ldi	r25, 0x08	; 8
 444:	90 93 f0 00 	sts	0x00F0, r25
		usb_configuration = 0;
 448:	10 92 00 01 	sts	0x0100, r1
        }
	if (intbits & (1<<SOFI)) {
 44c:	82 ff       	sbrs	r24, 2
 44e:	1a c0       	rjmp	.+52     	; 0x484 <__vector_10+0x70>
		if (usb_configuration) {
 450:	80 91 00 01 	lds	r24, 0x0100
 454:	88 23       	and	r24, r24
 456:	b1 f0       	breq	.+44     	; 0x484 <__vector_10+0x70>
			t = debug_flush_timer;
 458:	80 91 01 01 	lds	r24, 0x0101
			if (t) {
 45c:	88 23       	and	r24, r24
 45e:	91 f0       	breq	.+36     	; 0x484 <__vector_10+0x70>
				debug_flush_timer = -- t;
 460:	81 50       	subi	r24, 0x01	; 1
 462:	80 93 01 01 	sts	0x0101, r24
				if (!t) {
 466:	88 23       	and	r24, r24
 468:	69 f4       	brne	.+26     	; 0x484 <__vector_10+0x70>
					UENUM = DEBUG_TX_ENDPOINT;
 46a:	83 e0       	ldi	r24, 0x03	; 3
 46c:	80 93 e9 00 	sts	0x00E9, r24
					while ((UEINTX & (1<<RWAL))) {
 470:	02 c0       	rjmp	.+4      	; 0x476 <__vector_10+0x62>
						UEDATX = 0;
 472:	10 92 f1 00 	sts	0x00F1, r1
			t = debug_flush_timer;
			if (t) {
				debug_flush_timer = -- t;
				if (!t) {
					UENUM = DEBUG_TX_ENDPOINT;
					while ((UEINTX & (1<<RWAL))) {
 476:	80 91 e8 00 	lds	r24, 0x00E8
 47a:	85 fd       	sbrc	r24, 5
 47c:	fa cf       	rjmp	.-12     	; 0x472 <__vector_10+0x5e>
						UEDATX = 0;
					}
					UEINTX = 0x3A;
 47e:	8a e3       	ldi	r24, 0x3A	; 58
 480:	80 93 e8 00 	sts	0x00E8, r24
				}
			}
		}
	}
}
 484:	9f 91       	pop	r25
 486:	8f 91       	pop	r24
 488:	0f 90       	pop	r0
 48a:	0f be       	out	0x3f, r0	; 63
 48c:	0f 90       	pop	r0
 48e:	1f 90       	pop	r1
 490:	18 95       	reti

00000492 <__vector_11>:
// USB Endpoint Interrupt - endpoint 0 is handled here.  The
// other endpoints are manipulated by the user-callable
// functions, and the start-of-frame interrupt.
//
ISR(USB_COM_vect)
{
 492:	1f 92       	push	r1
 494:	0f 92       	push	r0
 496:	0f b6       	in	r0, 0x3f	; 63
 498:	0f 92       	push	r0
 49a:	11 24       	eor	r1, r1
 49c:	ef 92       	push	r14
 49e:	ff 92       	push	r15
 4a0:	0f 93       	push	r16
 4a2:	1f 93       	push	r17
 4a4:	2f 93       	push	r18
 4a6:	3f 93       	push	r19
 4a8:	4f 93       	push	r20
 4aa:	5f 93       	push	r21
 4ac:	6f 93       	push	r22
 4ae:	7f 93       	push	r23
 4b0:	8f 93       	push	r24
 4b2:	9f 93       	push	r25
 4b4:	af 93       	push	r26
 4b6:	bf 93       	push	r27
 4b8:	ef 93       	push	r30
 4ba:	ff 93       	push	r31
 4bc:	df 93       	push	r29
 4be:	cf 93       	push	r28
 4c0:	0f 92       	push	r0
 4c2:	cd b7       	in	r28, 0x3d	; 61
 4c4:	de b7       	in	r29, 0x3e	; 62
	uint16_t wLength;
	uint16_t desc_val;
	const uint8_t *desc_addr;
	uint8_t	desc_length;

        UENUM = 0;
 4c6:	10 92 e9 00 	sts	0x00E9, r1
        intbits = UEINTX;
 4ca:	80 91 e8 00 	lds	r24, 0x00E8
        if (intbits & (1<<RXSTPI)) {
 4ce:	83 ff       	sbrs	r24, 3
 4d0:	1c c1       	rjmp	.+568    	; 0x70a <__vector_11+0x278>
                bmRequestType = UEDATX;
 4d2:	40 91 f1 00 	lds	r20, 0x00F1
                bRequest = UEDATX;
 4d6:	50 91 f1 00 	lds	r21, 0x00F1
                wValue = UEDATX;
 4da:	00 91 f1 00 	lds	r16, 0x00F1
 4de:	10 e0       	ldi	r17, 0x00	; 0
                wValue |= (UEDATX << 8);
 4e0:	20 91 f1 00 	lds	r18, 0x00F1
 4e4:	92 2f       	mov	r25, r18
 4e6:	80 e0       	ldi	r24, 0x00	; 0
 4e8:	08 2b       	or	r16, r24
 4ea:	19 2b       	or	r17, r25
                wIndex = UEDATX;
 4ec:	80 91 f1 00 	lds	r24, 0x00F1
 4f0:	e8 2e       	mov	r14, r24
 4f2:	ff 24       	eor	r15, r15
                wIndex |= (UEDATX << 8);
 4f4:	20 91 f1 00 	lds	r18, 0x00F1
 4f8:	92 2f       	mov	r25, r18
 4fa:	80 e0       	ldi	r24, 0x00	; 0
 4fc:	e8 2a       	or	r14, r24
 4fe:	f9 2a       	or	r15, r25
                wLength = UEDATX;
 500:	20 91 f1 00 	lds	r18, 0x00F1
 504:	30 e0       	ldi	r19, 0x00	; 0
                wLength |= (UEDATX << 8);
 506:	60 91 f1 00 	lds	r22, 0x00F1
 50a:	96 2f       	mov	r25, r22
 50c:	80 e0       	ldi	r24, 0x00	; 0
 50e:	28 2b       	or	r18, r24
 510:	39 2b       	or	r19, r25
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
 512:	82 ef       	ldi	r24, 0xF2	; 242
 514:	80 93 e8 00 	sts	0x00E8, r24
                if (bRequest == GET_DESCRIPTOR) {
 518:	56 30       	cpi	r21, 0x06	; 6
 51a:	09 f0       	breq	.+2      	; 0x51e <__vector_11+0x8c>
 51c:	53 c0       	rjmp	.+166    	; 0x5c4 <__vector_11+0x132>

// USB Endpoint Interrupt - endpoint 0 is handled here.  The
// other endpoints are manipulated by the user-callable
// functions, and the start-of-frame interrupt.
//
ISR(USB_COM_vect)
 51e:	80 e3       	ldi	r24, 0x30	; 48
 520:	91 e0       	ldi	r25, 0x01	; 1
 522:	ac 01       	movw	r20, r24
 524:	45 50       	subi	r20, 0x05	; 5
 526:	50 40       	sbci	r21, 0x00	; 0
                if (bRequest == GET_DESCRIPTOR) {
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
					UECONX = (1<<STALLRQ)|(1<<EPEN);  //stall
					return;
 528:	fc 01       	movw	r30, r24
 52a:	37 97       	sbiw	r30, 0x07	; 7
				}
				desc_val = pgm_read_word(list);
 52c:	65 91       	lpm	r22, Z+
 52e:	74 91       	lpm	r23, Z+
				if (desc_val != wValue) {
 530:	60 17       	cp	r22, r16
 532:	71 07       	cpc	r23, r17
 534:	c9 f4       	brne	.+50     	; 0x568 <__vector_11+0xd6>
					list += sizeof(struct descriptor_list_struct);
					continue;
				}
				list += 2;
				desc_val = pgm_read_word(list);
 536:	fa 01       	movw	r30, r20
 538:	65 91       	lpm	r22, Z+
 53a:	74 91       	lpm	r23, Z+
				if (desc_val != wIndex) {
 53c:	6e 15       	cp	r22, r14
 53e:	7f 05       	cpc	r23, r15
 540:	99 f4       	brne	.+38     	; 0x568 <__vector_11+0xd6>
					list += sizeof(struct descriptor_list_struct)-2;
					continue;
				}
				list += 2;
 542:	4e 5f       	subi	r20, 0xFE	; 254
 544:	5f 4f       	sbci	r21, 0xFF	; 255
				desc_addr = (const uint8_t *)pgm_read_word(list);
 546:	fa 01       	movw	r30, r20
 548:	85 91       	lpm	r24, Z+
 54a:	94 91       	lpm	r25, Z+
				list += 2;
 54c:	4e 5f       	subi	r20, 0xFE	; 254
 54e:	5f 4f       	sbci	r21, 0xFF	; 255
				desc_length = pgm_read_byte(list);
 550:	fa 01       	movw	r30, r20
 552:	44 91       	lpm	r20, Z+
				break;
			}
			len = (wLength < 256) ? wLength : 255;
 554:	2f 3f       	cpi	r18, 0xFF	; 255
 556:	31 05       	cpc	r19, r1
 558:	19 f0       	breq	.+6      	; 0x560 <__vector_11+0xce>
 55a:	10 f0       	brcs	.+4      	; 0x560 <__vector_11+0xce>
 55c:	2f ef       	ldi	r18, 0xFF	; 255
 55e:	30 e0       	ldi	r19, 0x00	; 0
 560:	24 17       	cp	r18, r20
 562:	50 f4       	brcc	.+20     	; 0x578 <__vector_11+0xe6>
 564:	42 2f       	mov	r20, r18
 566:	08 c0       	rjmp	.+16     	; 0x578 <__vector_11+0xe6>
 568:	07 96       	adiw	r24, 0x07	; 7
 56a:	49 5f       	subi	r20, 0xF9	; 249
 56c:	5f 4f       	sbci	r21, 0xFF	; 255
                wLength |= (UEDATX << 8);
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
                if (bRequest == GET_DESCRIPTOR) {
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
 56e:	f1 e0       	ldi	r31, 0x01	; 1
 570:	81 36       	cpi	r24, 0x61	; 97
 572:	9f 07       	cpc	r25, r31
 574:	c9 f6       	brne	.-78     	; 0x528 <__vector_11+0x96>
 576:	c9 c0       	rjmp	.+402    	; 0x70a <__vector_11+0x278>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 578:	ae ef       	ldi	r26, 0xFE	; 254
			len = (wLength < 256) ? wLength : 255;
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
 57a:	20 91 e8 00 	lds	r18, 0x00E8
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
 57e:	30 e0       	ldi	r19, 0x00	; 0
 580:	b9 01       	movw	r22, r18
 582:	65 70       	andi	r22, 0x05	; 5
 584:	70 70       	andi	r23, 0x00	; 0
 586:	61 15       	cp	r22, r1
 588:	71 05       	cpc	r23, r1
 58a:	b9 f3       	breq	.-18     	; 0x57a <__vector_11+0xe8>
				if (i & (1<<RXOUTI)) return;	// abort
 58c:	22 fd       	sbrc	r18, 2
 58e:	c0 c0       	rjmp	.+384    	; 0x710 <__vector_11+0x27e>
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
 590:	54 2f       	mov	r21, r20
 592:	41 32       	cpi	r20, 0x21	; 33
 594:	08 f0       	brcs	.+2      	; 0x598 <__vector_11+0x106>
 596:	50 e2       	ldi	r21, 0x20	; 32
				for (i = n; i; i--) {
 598:	9c 01       	movw	r18, r24
 59a:	65 2f       	mov	r22, r21
 59c:	07 c0       	rjmp	.+14     	; 0x5ac <__vector_11+0x11a>
 59e:	f9 01       	movw	r30, r18
					UEDATX = pgm_read_byte(desc_addr++);
 5a0:	2f 5f       	subi	r18, 0xFF	; 255
 5a2:	3f 4f       	sbci	r19, 0xFF	; 255
 5a4:	e4 91       	lpm	r30, Z+
 5a6:	e0 93 f1 00 	sts	0x00F1, r30
					i = UEINTX;
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
 5aa:	61 50       	subi	r22, 0x01	; 1
 5ac:	66 23       	and	r22, r22
 5ae:	b9 f7       	brne	.-18     	; 0x59e <__vector_11+0x10c>
 5b0:	85 0f       	add	r24, r21
 5b2:	91 1d       	adc	r25, r1
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
 5b4:	45 1b       	sub	r20, r21
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 5b6:	a0 93 e8 00 	sts	0x00E8, r26
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
 5ba:	44 23       	and	r20, r20
 5bc:	f1 f6       	brne	.-68     	; 0x57a <__vector_11+0xe8>
 5be:	50 32       	cpi	r21, 0x20	; 32
 5c0:	e1 f2       	breq	.-72     	; 0x57a <__vector_11+0xe8>
 5c2:	a6 c0       	rjmp	.+332    	; 0x710 <__vector_11+0x27e>
			return;
                }
		if (bRequest == SET_ADDRESS) {
 5c4:	55 30       	cpi	r21, 0x05	; 5
 5c6:	41 f4       	brne	.+16     	; 0x5d8 <__vector_11+0x146>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 5c8:	8e ef       	ldi	r24, 0xFE	; 254
 5ca:	80 93 e8 00 	sts	0x00E8, r24
			} while (len || n == ENDPOINT0_SIZE);
			return;
                }
		if (bRequest == SET_ADDRESS) {
			usb_send_in();
			usb_wait_in_ready();
 5ce:	c0 de       	rcall	.-640    	; 0x350 <usb_wait_in_ready>
			UDADDR = wValue | (1<<ADDEN);
 5d0:	00 68       	ori	r16, 0x80	; 128
 5d2:	00 93 e3 00 	sts	0x00E3, r16
			return;
 5d6:	9c c0       	rjmp	.+312    	; 0x710 <__vector_11+0x27e>
		}
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
 5d8:	59 30       	cpi	r21, 0x09	; 9
 5da:	31 f5       	brne	.+76     	; 0x628 <__vector_11+0x196>
 5dc:	44 23       	and	r20, r20
 5de:	09 f0       	breq	.+2      	; 0x5e2 <__vector_11+0x150>
 5e0:	94 c0       	rjmp	.+296    	; 0x70a <__vector_11+0x278>
			usb_configuration = wValue;
 5e2:	00 93 00 01 	sts	0x0100, r16
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 5e6:	8e ef       	ldi	r24, 0xFE	; 254
 5e8:	80 93 e8 00 	sts	0x00E8, r24
		}
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
			usb_configuration = wValue;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
 5ec:	41 e0       	ldi	r20, 0x01	; 1
			return;
		}
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
			usb_configuration = wValue;
			usb_send_in();
			cfg = endpoint_config_table;
 5ee:	8a e5       	ldi	r24, 0x5A	; 90
 5f0:	91 e0       	ldi	r25, 0x01	; 1
			for (i=1; i<5; i++) {
				UENUM = i;
 5f2:	40 93 e9 00 	sts	0x00E9, r20
				en = pgm_read_byte(cfg++);
 5f6:	fc 01       	movw	r30, r24
 5f8:	01 96       	adiw	r24, 0x01	; 1
 5fa:	e4 91       	lpm	r30, Z+
				UECONX = en;
 5fc:	e0 93 eb 00 	sts	0x00EB, r30
				if (en) {
 600:	ee 23       	and	r30, r30
 602:	69 f0       	breq	.+26     	; 0x61e <__vector_11+0x18c>
					UECFG0X = pgm_read_byte(cfg++);
 604:	9c 01       	movw	r18, r24
 606:	2f 5f       	subi	r18, 0xFF	; 255
 608:	3f 4f       	sbci	r19, 0xFF	; 255
 60a:	fc 01       	movw	r30, r24
 60c:	84 91       	lpm	r24, Z+
 60e:	80 93 ec 00 	sts	0x00EC, r24
					UECFG1X = pgm_read_byte(cfg++);
 612:	c9 01       	movw	r24, r18
 614:	01 96       	adiw	r24, 0x01	; 1
 616:	f9 01       	movw	r30, r18
 618:	24 91       	lpm	r18, Z+
 61a:	20 93 ed 00 	sts	0x00ED, r18
		}
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
			usb_configuration = wValue;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
 61e:	4f 5f       	subi	r20, 0xFF	; 255
 620:	45 30       	cpi	r20, 0x05	; 5
 622:	39 f7       	brne	.-50     	; 0x5f2 <__vector_11+0x160>
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
					UECFG1X = pgm_read_byte(cfg++);
				}
			}
        		UERST = 0x1E;
 624:	8e e1       	ldi	r24, 0x1E	; 30
 626:	46 c0       	rjmp	.+140    	; 0x6b4 <__vector_11+0x222>
        		UERST = 0;
			return;
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
 628:	58 30       	cpi	r21, 0x08	; 8
 62a:	49 f4       	brne	.+18     	; 0x63e <__vector_11+0x1ac>
 62c:	40 38       	cpi	r20, 0x80	; 128
 62e:	09 f0       	breq	.+2      	; 0x632 <__vector_11+0x1a0>
 630:	6c c0       	rjmp	.+216    	; 0x70a <__vector_11+0x278>
			usb_wait_in_ready();
 632:	8e de       	rcall	.-740    	; 0x350 <usb_wait_in_ready>
			UEDATX = usb_configuration;
 634:	80 91 00 01 	lds	r24, 0x0100
 638:	80 93 f1 00 	sts	0x00F1, r24
 63c:	16 c0       	rjmp	.+44     	; 0x66a <__vector_11+0x1d8>
			usb_send_in();
			return;
		}

		if (bRequest == GET_STATUS) {
 63e:	55 23       	and	r21, r21
 640:	c1 f4       	brne	.+48     	; 0x672 <__vector_11+0x1e0>
			usb_wait_in_ready();
 642:	49 83       	std	Y+1, r20	; 0x01
 644:	85 de       	rcall	.-758    	; 0x350 <usb_wait_in_ready>
			i = 0;
			#ifdef SUPPORT_ENDPOINT_HALT
			if (bmRequestType == 0x82) {
 646:	49 81       	ldd	r20, Y+1	; 0x01
 648:	42 38       	cpi	r20, 0x82	; 130
 64a:	51 f4       	brne	.+20     	; 0x660 <__vector_11+0x1ce>
				UENUM = wIndex;
 64c:	e0 92 e9 00 	sts	0x00E9, r14
				if (UECONX & (1<<STALLRQ)) i = 1;
 650:	90 91 eb 00 	lds	r25, 0x00EB
			return;
		}

		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
 654:	81 e0       	ldi	r24, 0x01	; 1
 656:	95 ff       	sbrs	r25, 5
 658:	80 e0       	ldi	r24, 0x00	; 0
			#ifdef SUPPORT_ENDPOINT_HALT
			if (bmRequestType == 0x82) {
				UENUM = wIndex;
				if (UECONX & (1<<STALLRQ)) i = 1;
				UENUM = 0;
 65a:	10 92 e9 00 	sts	0x00E9, r1
 65e:	01 c0       	rjmp	.+2      	; 0x662 <__vector_11+0x1d0>
			return;
		}

		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
 660:	80 e0       	ldi	r24, 0x00	; 0
				UENUM = wIndex;
				if (UECONX & (1<<STALLRQ)) i = 1;
				UENUM = 0;
			}
			#endif
			UEDATX = i;
 662:	80 93 f1 00 	sts	0x00F1, r24
			UEDATX = 0;
 666:	10 92 f1 00 	sts	0x00F1, r1
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 66a:	8e ef       	ldi	r24, 0xFE	; 254
 66c:	80 93 e8 00 	sts	0x00E8, r24
 670:	4f c0       	rjmp	.+158    	; 0x710 <__vector_11+0x27e>
			UEDATX = 0;
			usb_send_in();
			return;
		}
		#ifdef SUPPORT_ENDPOINT_HALT
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
 672:	51 30       	cpi	r21, 0x01	; 1
 674:	19 f0       	breq	.+6      	; 0x67c <__vector_11+0x1ea>
 676:	53 30       	cpi	r21, 0x03	; 3
 678:	09 f0       	breq	.+2      	; 0x67c <__vector_11+0x1ea>
 67a:	47 c0       	rjmp	.+142    	; 0x70a <__vector_11+0x278>
		  && bmRequestType == 0x02 && wValue == 0) {
 67c:	42 30       	cpi	r20, 0x02	; 2
 67e:	f9 f4       	brne	.+62     	; 0x6be <__vector_11+0x22c>
 680:	01 15       	cp	r16, r1
 682:	11 05       	cpc	r17, r1
 684:	e1 f4       	brne	.+56     	; 0x6be <__vector_11+0x22c>
			i = wIndex & 0x7F;
 686:	6e 2d       	mov	r22, r14
 688:	6f 77       	andi	r22, 0x7F	; 127
			if (i >= 1 && i <= MAX_ENDPOINT) {
 68a:	86 2f       	mov	r24, r22
 68c:	81 50       	subi	r24, 0x01	; 1
 68e:	84 30       	cpi	r24, 0x04	; 4
 690:	b0 f4       	brcc	.+44     	; 0x6be <__vector_11+0x22c>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 692:	8e ef       	ldi	r24, 0xFE	; 254
 694:	80 93 e8 00 	sts	0x00E8, r24
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
		  && bmRequestType == 0x02 && wValue == 0) {
			i = wIndex & 0x7F;
			if (i >= 1 && i <= MAX_ENDPOINT) {
				usb_send_in();
				UENUM = i;
 698:	60 93 e9 00 	sts	0x00E9, r22
				if (bRequest == SET_FEATURE) {
 69c:	53 30       	cpi	r21, 0x03	; 3
 69e:	a9 f1       	breq	.+106    	; 0x70a <__vector_11+0x278>
					UECONX = (1<<STALLRQ)|(1<<EPEN);
				} else {
					UECONX = (1<<STALLRQC)|(1<<RSTDT)|(1<<EPEN);
 6a0:	89 e1       	ldi	r24, 0x19	; 25
 6a2:	80 93 eb 00 	sts	0x00EB, r24
					UERST = (1 << i);
 6a6:	81 e0       	ldi	r24, 0x01	; 1
 6a8:	90 e0       	ldi	r25, 0x00	; 0
 6aa:	02 c0       	rjmp	.+4      	; 0x6b0 <__vector_11+0x21e>
 6ac:	88 0f       	add	r24, r24
 6ae:	99 1f       	adc	r25, r25
 6b0:	6a 95       	dec	r22
 6b2:	e2 f7       	brpl	.-8      	; 0x6ac <__vector_11+0x21a>
 6b4:	80 93 ea 00 	sts	0x00EA, r24
					UERST = 0;
 6b8:	10 92 ea 00 	sts	0x00EA, r1
 6bc:	29 c0       	rjmp	.+82     	; 0x710 <__vector_11+0x27e>
				}
				return;
			}
		}
		#endif
		if (bRequest == HID_GET_REPORT && bmRequestType == 0xA1) {
 6be:	51 30       	cpi	r21, 0x01	; 1
 6c0:	21 f5       	brne	.+72     	; 0x70a <__vector_11+0x278>
 6c2:	41 3a       	cpi	r20, 0xA1	; 161
 6c4:	11 f5       	brne	.+68     	; 0x70a <__vector_11+0x278>
			if (wIndex == 0) {
 6c6:	e1 14       	cp	r14, r1
 6c8:	f1 04       	cpc	r15, r1
 6ca:	f9 f4       	brne	.+62     	; 0x70a <__vector_11+0x278>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 6cc:	3e ef       	ldi	r19, 0xFE	; 254
			if (wIndex == 0) {
				len = wLength;
				do {
					// wait for host ready for IN packet
					do {
						i = UEINTX;
 6ce:	80 91 e8 00 	lds	r24, 0x00E8
					} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
 6d2:	90 e0       	ldi	r25, 0x00	; 0
 6d4:	ac 01       	movw	r20, r24
 6d6:	45 70       	andi	r20, 0x05	; 5
 6d8:	50 70       	andi	r21, 0x00	; 0
 6da:	41 15       	cp	r20, r1
 6dc:	51 05       	cpc	r21, r1
 6de:	b9 f3       	breq	.-18     	; 0x6ce <__vector_11+0x23c>
					if (i & (1<<RXOUTI)) return;	// abort
 6e0:	82 fd       	sbrc	r24, 2
 6e2:	16 c0       	rjmp	.+44     	; 0x710 <__vector_11+0x27e>
					// send IN packet
					n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
 6e4:	82 2f       	mov	r24, r18
 6e6:	21 32       	cpi	r18, 0x21	; 33
 6e8:	08 f0       	brcs	.+2      	; 0x6ec <__vector_11+0x25a>
 6ea:	80 e2       	ldi	r24, 0x20	; 32
					for (i = n; i; i--) {
 6ec:	98 2f       	mov	r25, r24
 6ee:	03 c0       	rjmp	.+6      	; 0x6f6 <__vector_11+0x264>
						UEDATX = 0;
 6f0:	10 92 f1 00 	sts	0x00F1, r1
						i = UEINTX;
					} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
					if (i & (1<<RXOUTI)) return;	// abort
					// send IN packet
					n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
					for (i = n; i; i--) {
 6f4:	91 50       	subi	r25, 0x01	; 1
 6f6:	99 23       	and	r25, r25
 6f8:	d9 f7       	brne	.-10     	; 0x6f0 <__vector_11+0x25e>
						UEDATX = 0;
					}
					len -= n;
 6fa:	28 1b       	sub	r18, r24
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 6fc:	30 93 e8 00 	sts	0x00E8, r19
					for (i = n; i; i--) {
						UEDATX = 0;
					}
					len -= n;
					usb_send_in();
				} while (len || n == ENDPOINT0_SIZE);
 700:	22 23       	and	r18, r18
 702:	29 f7       	brne	.-54     	; 0x6ce <__vector_11+0x23c>
 704:	80 32       	cpi	r24, 0x20	; 32
 706:	19 f3       	breq	.-58     	; 0x6ce <__vector_11+0x23c>
 708:	03 c0       	rjmp	.+6      	; 0x710 <__vector_11+0x27e>
				return;
			}
		}
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
 70a:	81 e2       	ldi	r24, 0x21	; 33
 70c:	80 93 eb 00 	sts	0x00EB, r24
}
 710:	0f 90       	pop	r0
 712:	cf 91       	pop	r28
 714:	df 91       	pop	r29
 716:	ff 91       	pop	r31
 718:	ef 91       	pop	r30
 71a:	bf 91       	pop	r27
 71c:	af 91       	pop	r26
 71e:	9f 91       	pop	r25
 720:	8f 91       	pop	r24
 722:	7f 91       	pop	r23
 724:	6f 91       	pop	r22
 726:	5f 91       	pop	r21
 728:	4f 91       	pop	r20
 72a:	3f 91       	pop	r19
 72c:	2f 91       	pop	r18
 72e:	1f 91       	pop	r17
 730:	0f 91       	pop	r16
 732:	ff 90       	pop	r15
 734:	ef 90       	pop	r14
 736:	0f 90       	pop	r0
 738:	0f be       	out	0x3f, r0	; 63
 73a:	0f 90       	pop	r0
 73c:	1f 90       	pop	r1
 73e:	18 95       	reti

00000740 <print_P>:
#include <avr/pgmspace.h>

#include "print.h"

void print_P(const char *s)
{
 740:	1f 93       	push	r17
 742:	cf 93       	push	r28
 744:	df 93       	push	r29
 746:	ec 01       	movw	r28, r24
 748:	fe 01       	movw	r30, r28
	char c;

	while (1) {
		c = pgm_read_byte(s++);
 74a:	21 96       	adiw	r28, 0x01	; 1
 74c:	14 91       	lpm	r17, Z+
		if (!c) break;
 74e:	11 23       	and	r17, r17
 750:	39 f0       	breq	.+14     	; 0x760 <print_P+0x20>
		if (c == '\n') usb_debug_putchar('\r');
 752:	1a 30       	cpi	r17, 0x0A	; 10
 754:	11 f4       	brne	.+4      	; 0x75a <print_P+0x1a>
 756:	8d e0       	ldi	r24, 0x0D	; 13
 758:	17 de       	rcall	.-978    	; 0x388 <usb_debug_putchar>
		usb_debug_putchar(c);
 75a:	81 2f       	mov	r24, r17
 75c:	15 de       	rcall	.-982    	; 0x388 <usb_debug_putchar>
	}
 75e:	f4 cf       	rjmp	.-24     	; 0x748 <print_P+0x8>
}
 760:	df 91       	pop	r29
 762:	cf 91       	pop	r28
 764:	1f 91       	pop	r17
 766:	08 95       	ret

00000768 <_exit>:
 768:	f8 94       	cli

0000076a <__stop_program>:
 76a:	ff cf       	rjmp	.-2      	; 0x76a <__stop_program>
